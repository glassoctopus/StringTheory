import firebase from 'firebase/app';
import { clientCredentials } from '../utils/client';
import 'firebase/database';

// API CALLS FOR Posts

const endpoint = clientCredentials.databaseURL;

const getPosts = (thePostersId) => new Promise((resolve, reject) => {
  fetch(`${endpoint}/posts.json?orderBy="thePostersId"&equalTo="${thePostersId}"`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  })
    .then((response) => response.json())
    .then((data) => resolve(Object.values(data)))
    .catch(reject);
});

const getGhostPosts = (uid) => new Promise((resolve, reject) => {
  fetch(`${endpoint}/connectionPosts.json?orderBy="thePostersId"&equalTo="${uid}"`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  })
    .then((response) => response.json())
    .then((data) => resolve(Object.values(data)))
    .catch(reject);
});

const deletePost = (PostId) => new Promise((resolve, reject) => {
  fetch(`${endpoint}/posts/${PostId}.json`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    },
  })
    .then((response) => response.json())
    .then((data) => resolve((data)))
    .catch(reject);
});

const getSinglePost = (PostId) => new Promise((resolve, reject) => {
  fetch(`${endpoint}/posts/${PostId}.json`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  })
    .then((response) => response.json())
    .then((data) => resolve(data))
    .catch(reject);
});

const createPost = (payload) => new Promise((resolve, reject) => {
  fetch(`${endpoint}/posts.json`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(payload),
  })
    .then((response) => response.json())
    .then((data) => resolve(data))
    .catch(reject);
});

const createGhostPost = (payload) => new Promise((resolve, reject) => {
  fetch(`${endpoint}/connectionPosts.json`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(payload),
  })
    .then((response) => response.json())
    .then((data) => resolve(data))
    .catch(reject);
});

const updatePost = (payload) => new Promise((resolve, reject) => {
  fetch(`${endpoint}/posts/${payload.postId}.json`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(payload),
  })
    .then((response) => response.json())
    .then((data) => resolve(data))
    .catch(reject);
});

// Function to update a ghost post in connectionPosts endpoint
const updateGhostPost = (postId, data) => new Promise((resolve, reject) => {
  const ghostPostRef = firebase.database().ref(`/connectionPosts/${postId}`);
  ghostPostRef.update(data)
    .then(() => resolve())
    .catch((error) => reject(error));
});

export {
  getPosts,
  getGhostPosts,
  createPost,
  createGhostPost,
  deletePost,
  getSinglePost,
  updatePost,
  updateGhostPost,
};
